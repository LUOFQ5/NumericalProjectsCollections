C Copyright (c) 2014 David Patrick Hodapp
C
C Permission is hereby granted, free of charge, to any person obtaining a copy
C of this software and associated documentation files (the "Software"), to deal
C in the Software without restriction, including without limitation the rights   
C to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
C copies of the Software, and to permit persons to whom the Software is
C furnished to do so, subject to the following conditions:
C
C The above copyright notice and this permission notice shall be included in
C all copies or substantial portions of the Software.
C
C THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
C IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
C FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
C AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
C LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
C OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
C THE SOFTWARE.
C
      SUBROUTINE UEXTERNALDB(LOP,LRESTART,TIME,DTIME,KSTEP,KINC)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC     
C     (ABAQUS USER SUBROUTINE UEXTERNALDB)
C     PURPOSE:
C     - READS IN M(T) SPECIMEN GEOMETRY AND STEP LOADING DATA 
C     - RECIEVES DATA FROM USER SUBROUTINE URDFIL THROUGH A COMMON BLOCK
C     - PERFORMS THE FOLLOWING CALCULATIONS:
C        1) CALCULATE KOP AT EACH INCREMENT OF CRACK GROWTH      
C        2) CYCLE-BY-CYCLE NUMERICAL INTEGRATION OF CRACK LENGTH**
C        3) IDENTIFY CYCLES (SIGNIFICANT REVERSALS) FOR EXPLICIT** 
C           SIMULATION OVER NEXT INCREMENT OF CRACK GROWTH
C        **CONSTITUENT CYCLES ARE READ IN FROM AN EXTERNAL FILE
C     - PASSES DATA TO USER SUBROUTINE UAMP THROUGH A COMMON BLOCK
C     - WRITES POST-PROCESSING DATA
C     - RECIEVES 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      INCLUDE 'ABA_PARAM.INC'
C
      DIMENSION TIME(2)   
C
C     DECLARE LOCAL VARIABLES
      INTEGER      :: I,J,IOSTATUS
      INTEGER      :: NI,NII,NSTARTFRSTHALF,NSTOPFRSTHALF
      INTEGER      :: NSTARTSCNDHALF,NSTOPSCNDHALF,NUMCYC
      REAL(KIND=8) :: TRIANGLEA,DMINFRSTHALF,DMINSCNDHALF
      REAL(KIND=8) :: KOPPREDICT,MAXDELTAS,DELTAS,SMIN,SMAX
      REAL(KIND=8), DIMENSION(9999) :: OUTPUTARRAY
C
C     DECLARE FUNCTIONS TO BE CALLED BY SUBROUTINE
      REAL(KIND=8) :: CALC_KOP
C
C     COMMON BLOCK DATA
C     - RECSTEP:        CURRENT ANALYSIS STEP
C     - RECINC:         CURRENT ANALYSIS INCREMENT (WITHIN CURRENT STEP)
C     - DEBONDFLAG:     FLAG=1 DURING DEBOND STEP, FLAG=0 OTHERWISE   
C     - CRACKTIPNODE:   CRACK TIP NODE LABEL (RECORD 1993/ATTRIBUTE 5)
C     - DEBONDCRACKLEN: CUMULATIVE DEBOND CRACK LENGTH 
C                       (RECORD 1993/ATTRIBUTE 7)
C     - RECINCTIME:     TIME INDEX E [0,1] OF CURRENT ANALYSIS INCREMENT
C     - CRACKTIPCPRESS: CSTRESS CONTACT PRESSURES (RECORD 1511/ATTRIBUTE 1)
C                       OF CRACKTIPNODE
C       **ZEROTH INCREMENT ADDED INDEPENDENT OF RESULTS FILE AT INDEX=1
C         ACTUAL ARRAY WILL HAVE RECINC+1 ENTRIES
      INTEGER      :: RECSTEP,RECINC,DEBONDFLAG,CRACKTIPNODE
      REAL(KIND=8) :: DEBONDCRACKLEN 
      REAL(KIND=8), DIMENSION(99) :: RECINCTIME,CRACKTIPCPRESS
      COMMON /KDATA1/ RECSTEP,RECINC,DEBONDFLAG,CRACKTIPNODE,
     1                DEBONDCRACKLEN,RECINCTIME,CRACKTIPCPRESS
C
C     COMMON BLOCK DATA
C     - MTDIMB:          SPECIMEN DIMENSION B [m] (SEE ASTM E647-13)
C     - MTDIML:          SPECIMEN DIMENSION L [m] (SEE ASTM E647-13)
C     - MTDIMW:          SPECIMEN DIMENSION W [m] (SEE ASTM E647-13)
C     - INITIALCRACKLEN: INITIAL M(T) SPECIMEN HALF-CRACK LENGTH [m] 
C                        (SEE ASTM E647-13) BEFORE DEBOND
C     - STABCRACKLEN:    HALF-CRACK LENGTH [m] AT START OF NUMERICAL 
C                        INTEGRATION    
      REAL(KIND=8) :: MTDIMB,MTDIML,MTDIMW,INITIALCRACKLEN,STABCRACKLEN
      COMMON /KDATA2/ MTDIMB,MTDIML,MTDIMW,INITIALCRACKLEN,
     1                STABCRACKLEN
C
C     COMMON BLOCK DATA
C     - MTSTEPLOADING: VERTICAL BENDING STRESS (UNCRACKED SPECIMEN)
C                      TO BE REALIZED AT THE END OF THE STEP (INDEX)
C     - MEANS:         MEAN STRESS [MPa] CORRESPONDING TO STRESSSEQFIL
      REAL(KIND=8)                   :: MEANS 
      REAL(KIND=8), DIMENSION(99999) :: MTSTEPLOADING
      COMMON /KDATA3/ MEANS,MTSTEPLOADING       
C
C     COMMON BLOCK DATA
C     - OUTDIR:       CURRENT ABAQUS WORKING DIRECTORY
C     - GEOMFIL:      FILE EXT\NAME OF M(T) SPECIMEN GEOMETRY
C     - LOADFIL:      FILE EXT\NAME OF  MTSTEPLOADING DATA 
C     - STRESSSEQFIL: FILE EXT\NAME OF STRESS REVERSALS; 
C                     FMT='(2ES17.10)'; SMIN,SMAX
C     - OUTDATAFIL:   FILE NAME OF POST-PROCESSING OUTPUT DATA
C     - LEN*:         NUMBER OF CHARACTERS ASSOCIATED WITH (*)
      CHARACTER*256 :: OUTDIR,GEOMFIL,LOADFIL,STRESSSEQFIL,
     1                 OUTDATAFIL
      INTEGER       :: LENOUTDIR,LENGEOMFIL,LENLOADFIL,LENSTRESSSEQFIL,
     1                 LENOUTDATAFIL
      COMMON /KDATA4/ OUTDIR,GEOMFIL,LOADFIL,STRESSSEQFIL,OUTDATAFIL,
     1                LENOUTDIR,LENGEOMFIL,LENLOADFIL,LENSTRESSSEQFIL,
     2                LENOUTDATAFIL
C
C     COMMON BLOCK DATA
C     - NUMINTFLAG:   FLAG=1 WHEN CRACKLENNOM(CRACKGROWINC)>STABCRACKLEN, 
C                     FLAG=0 OTHERWISE
C     - NUMOORCYC:    NUMBER OF SIGNIFICANT REVERSAL PAIRS TO BE RETURNED
C                     **ASSUMED NUMOORCYC<4999
C     - CRACKGROWINC: CURRENT CRACK GROWTH INCREMENT; CRACKGROWINC=0
C                     BEFORE FIRST DEBOND STEP
C     - CYCNUM:       CORRESPONDING CYCLE NUMBER FROM STRESS SEQUENCE AT 
C                     START OF INCREMENT
C     - CRACKLENNOM:  CORRESPONDING (NOMINAL) HALF-CRACK LENGTH [m] BASED 
C                     ON ELASTIC-PLASTIC FEM DEBOND CRACK LENGTH
C     - CRACKLENACT:  CORRESPONDING (ACTUAL) HALF-CRACK LENGTH [m] BASED 
C                     ON CYCLE-BY-CYCLE NUMERICAL INTEGRATION
C     - KOP:          CORRESPONDING OPENING LEVEL [MPa-m^(1/2)]
C     - CALCKOPSTEP:  DETERMINES WHICH LOAD CYCLE TO EVALUATE KOP,
C                     CALCKOPSTEP=2 (FIRST CYCLE IN CURRENT INCREMENT)  
C                     CALCKOPSTEP=4 (SECOND CYCLE IN CURRENT INCREMENT)
      INTEGER                       :: NUMINTFLAG,NUMOORCYC,CRACKGROWINC
      INTEGER, DIMENSION(9999)      :: CYCNUM
      REAL(KIND=8), DIMENSION(9999) :: CRACKLENNOM,CRACKLENACT,KOP
      INTEGER, DIMENSION(9999)      :: CALCKOPSTEP
      COMMON /KDATA5/ NUMINTFLAG,NUMOORCYC,CRACKGROWINC,CYCNUM,
     1                CRACKLENNOM,CRACKLENACT,KOP,CALCKOPSTEP
C
C     COMMON BLOCK DATA
C     - EOFFLAG:   FLAG=1 WHEN CYCNUM(CRACKGROWINC) CORRESPONDS TO EOF
C                  CONDITION, FLAG=0 OTHERWISE
      INTEGER :: EOFFLAG
      COMMON /KDATA6/ EOFFLAG
C
C SUBROUTINE CALL AT START OF ANALYSIS (LOP=0)
C
      IF (LOP.EQ.0) THEN
C        DETERMINE CURRENT ABAQUS OUTPUT DIRECTORY NAME
         CALL GETOUTDIR(OUTDIR,LENOUTDIR)
C        DETERMINE ALL FILE NAMES AS STRINGS
         GEOMFIL         = OUTDIR(1:LENOUTDIR)//'/MT_GEOM.dat'
         LOADFIL         = OUTDIR(1:LENOUTDIR)//'/MT_LOADING.dat'
         STRESSSEQFIL    = OUTDIR(1:LENOUTDIR)//'/STRESS_SEQUENCE.dat'
         OUTDATAFIL      = OUTDIR(1:LENOUTDIR)//'/OUTPUT_DATA.dat'
         LENGEOMFIL      = LENOUTDIR+12
         LENLOADFIL      = LENOUTDIR+15
         LENSTRESSSEQFIL = LENOUTDIR+20
         LENOUTDATAFIL   = LENOUTDIR+16
C        SET INITIAL VALUE OF CRACKGROWINC, DEBONDCRACKLEN, EOFFLAG, 
C        NUMINTFLAG, AND CALCKOPSTEP
         CRACKGROWINC=0
         EOFFLAG=0
         NUMINTFLAG=0
         DEBONDCRACKLEN=0.0
         DO I=1,9999
            CALCKOPSTEP(I)=2
         END DO
C        READ IN M(T) GEOMETRY DATA
         OPEN(UNIT=101,FILE=GEOMFIL(1:LENGEOMFIL),STATUS='OLD')
         READ(UNIT=101,FMT='(ES17.10)')MTDIMB
         READ(UNIT=101,FMT='(ES17.10)')MTDIML
         READ(UNIT=101,FMT='(ES17.10)')MTDIMW
         READ(UNIT=101,FMT='(ES17.10)')INITIALCRACKLEN
         READ(UNIT=101,FMT='(ES17.10)')STABCRACKLEN		 
         CLOSE(101)
C        READ IN M(T) LOADING DATA
         DO I=1,99999         
            MTSTEPLOADING(I)=0.0
         END DO
         OPEN(UNIT=101,FILE=LOADFIL(1:LENLOADFIL),STATUS='OLD',
     1        IOSTAT=IOSTATUS)
         READ(UNIT=101,FMT='(I4)',IOSTAT=IOSTATUS)NUMOORCYC
         DO I=1,99999
            READ(UNIT=101,FMT='(ES17.10)',
     1           IOSTAT=IOSTATUS)MTSTEPLOADING(I)	 
            IF (IS_IOSTAT_END(IOSTATUS)) GO TO 100	 
         END DO 
 100     CONTINUE
         CLOSE(101)
C        DETERMINE INPUT STRESS SEQUENCE MEAN
         MEANS=0.0
         NUMCYC=0
         OPEN(UNIT=101,FILE=STRESSSEQFIL(1:LENSTRESSSEQFIL),
     1        STATUS='OLD',IOSTAT=IOSTATUS)
         DO I=1,999999999
            READ(UNIT=101,FMT='(2ES17.10)',IOSTAT=IOSTATUS)SMIN,SMAX
            IF (IS_IOSTAT_END(IOSTATUS)) THEN
               GO TO 101
            END IF
            MEANS=MEANS+(SMIN+SMAX)/2.0
            NUMCYC=NUMCYC+1
         END DO
 101     CONTINUE
         CLOSE(101)
         MEANS=MEANS/DBLE(NUMCYC)		 
C        WRITE OUTPUT FILE HEADER
         OPEN(UNIT=101,FILE=OUTDATAFIL(1:LENOUTDATAFIL),
     1        STATUS='REPLACE')
         WRITE(UNIT=101,FMT='(A4,5A17,7A9)')'INC',
     1         '  CRACKLENNOM (m)',
     2         '  CRACKLENACT (m)',
     3         '  KOP (MPa-m^1/2)',
     4         '     DMINSCNDHALF',
     5         '     DMINFRSTHALF',
     6         '       NI','      NII',
     7         '  NSTSCND',' NSTPSCND',
     8         '  NSTFRST',' NSTPFRST',
     9         '  KOPSTEP'
         CLOSE(101)
      END IF
C
C SUBROUTINE CALL AT END OF CURRENT ANALYSIS INCREMENT (LOP=2)
C
      IF (LOP.EQ.2) THEN
C        SEQUENTIALLY COUNT THE INCREMENT OF CRACK CRACK GROWTH
C        FOLLOWING COMPLETION OF DEBOND STEP.
C        **UEXTERNALDB CALLED BEFORE URDFIL, THEREFORE
C          (RECSTEP.NE.KSTEP) WHEN DATA FROM ENTIRE STEP IS AVAILABLE
         IF ((DEBONDFLAG.EQ.1).AND.(RECSTEP.NE.KSTEP)) THEN
            CRACKGROWINC=CRACKGROWINC+1
         END IF
C       
C        SET DMIN VALUES TO ZERO TO ENSURE PROPER FORMAT FOR POSTPROCESSING
         DMINFRSTHALF=0.0
         DMINSCNDHALF=0.0
C
C        IDENTIFIES THE TARGET CRACK TIP OPENING AFTER NODE RELEASE 
C        AS REQUIRED BY CALCKOPSTEP.  CRACK TIP CONTACT PRESSURE DATA 
C        SETS SETS (PASSED FROM USER SUBROUTINE URDFIL) ARE AVAILABLE 
C        FOR FOLLOW-ON PROCESSING. 
C        **NO ATTEMPT IS MADE TO ENSURE A SUFFICIENT NUMBER OF 
C          INCREMENTS ARE AVAILABLE FOR INTERPOLATION.
         IF ((CRACKGROWINC.GE.1).AND.
     1       (RECSTEP.NE.KSTEP).AND.
     2       (RECSTEP.EQ.((NUMOORCYC*2+1)*CRACKGROWINC+
     3                    CALCKOPSTEP(CRACKGROWINC)))) THEN
C
C           RECORD INCREMENTAL CRACK LENGTH AND APPROXIMATE TRIANGLEA
C           **CRACK LENGTH IS MEASURED ALONG THE SLAVE SURFACE IN THE 
C             DEFORMED CONDITION AND WILL HENCE VARY SLIGHTLY.
            CRACKLENNOM(CRACKGROWINC)=INITIALCRACKLEN+DEBONDCRACKLEN
            IF (CRACKGROWINC.EQ.1) THEN
               TRIANGLEA=DEBONDCRACKLEN
            ELSE
               TRIANGLEA=CRACKLENNOM(CRACKGROWINC)-
     1                    CRACKLENNOM(CRACKGROWINC-1)
            END IF
C
C           CALCULATE KOP AT CURRENT INCREMENT OF CRACK GROWTH
C           **IF NO CYCLES WERE EXPLICITLY SIMULATED IN THE CURRENT
C             INCREMENT, THEN USE PREVIOUS INCREMENT VALUE OF KOP.
            IF (CALCKOPSTEP(CRACKGROWINC).NE.1) THEN 
               KOP(CRACKGROWINC)=CALC_KOP(
     1            MTSTEPLOADING(RECSTEP-1),
     2            MTSTEPLOADING(RECSTEP),
     3            CRACKLENNOM(CRACKGROWINC),
     4            MTDIMW,MTDIML,MTDIMB,
     5            (RECINC+1),RECINCTIME,CRACKTIPCPRESS)
            ELSE
               KOP(CRACKGROWINC)=KOP(CRACKGROWINC-1)
            END IF
C
C           DETERMINES KOP FOR USE IN PREDICTOR STEP
C           **BY DEFAULT, KOPPREDICT CORRESPONDS TO THE TRANSITION OF 
C             OF THE REMOTE LOADING FROM COMPRESSIVE TO TENSILE.
            IF ((CRACKGROWINC.GT.1).AND.
     1          (KOP(CRACKGROWINC-1).LT.(0.0))) THEN
               KOPPREDICT=KOP(CRACKGROWINC-1)
            ELSE
               KOPPREDICT=0.0
            END IF
C
C           CYCLE-BY-CYCLE NUMERICAL INTEGRATION OF CRACK LENGTH OVER
C           CURRENT INCREMENT.
            IF (NUMINTFLAG.EQ.1) THEN
               NI=CYCNUM(CRACKGROWINC)
               NSTARTSCNDHALF=CYCNUM(CRACKGROWINC+1)
               CALL NUM_INT(STRESSSEQFIL,LENSTRESSSEQFIL,
     1            NI,NII,
     2            CRACKLENACT(CRACKGROWINC),
     3            (CRACKLENNOM(CRACKGROWINC)+TRIANGLEA),
     4            TRIANGLEA,
     5            CRACKLENACT(CRACKGROWINC+1),
     6            KOP(CRACKGROWINC),
     7            MTDIMW,MTDIML,MTDIMB)
C              **ENSURES NSTOP >= NSTART
               IF (NSTARTSCNDHALF.GT.NII) THEN
                  NSTOPSCNDHALF=NSTARTSCNDHALF
               ELSE
                  NSTOPSCNDHALF=NII
               END IF
               CYCNUM(CRACKGROWINC+1)=NII
               NI=CYCNUM(CRACKGROWINC+1)
               NSTARTFRSTHALF=NSTOPSCNDHALF
               GO TO 200
            END IF
C
C           CYCLE-BY-CYCLE NUMERICAL INTEGRATION OF CRACK LENGTH OVER
C           NEXT INCREMENT BASED ON KOPPREDICT.
            IF ((NUMINTFLAG.EQ.0).AND.((CRACKLENNOM(CRACKGROWINC)+
     1          TRIANGLEA).GE.STABCRACKLEN)) THEN
               NUMINTFLAG=1
               NI=1
               CYCNUM(CRACKGROWINC+1)=NI
C              **BEGINS CYCLE-BY-CYCLE NUMERICAL INTEGRATION AT
C                INITIAL CRACK LENGTH GIVEN BY STABCRACKLEN.
               CRACKLENACT(CRACKGROWINC+1)=STABCRACKLEN
               NSTARTFRSTHALF=NI
 200           CONTINUE
               CALL NUM_INT(STRESSSEQFIL,LENSTRESSSEQFIL,
     1            NI,NII,
     2            CRACKLENACT(CRACKGROWINC+1),
     3            (CRACKLENNOM(CRACKGROWINC)+2*TRIANGLEA),
     4            TRIANGLEA,
     5            CRACKLENACT(CRACKGROWINC+2),
     6            KOPPREDICT,
     7            MTDIMW,MTDIML,MTDIMB)
               IF (NSTARTFRSTHALF.GT.NII) THEN
                  NSTOPFRSTHALF=NSTARTFRSTHALF
               ELSE
                  NSTOPFRSTHALF=NII
               END IF
               CYCNUM(CRACKGROWINC+2)=NSTOPFRSTHALF 
            END IF      
C
C           IDENTIFY CYCLES (SIGNIFICANT REVERSALS) FOR EXPLICIT 
C           SIMULATION.  CYCLES ARE WRITTEN TO MTSTEPLOADING WHICH 
C           IS PASSED TO USER SUBROUTINE UAMP THROUGH A COMMON BLOCK.
C
C           **IDENTIFIES THE SECOND HALF (CORRECTOR) PORTION OF
C             THE CURRENT INCREMENT.
            IF ((NUMINTFLAG.EQ.1).AND.(NSTARTFRSTHALF.GT.1)) THEN 
               NUMCYC=(NUMOORCYC-FLOOR(NUMOORCYC/2.0))
               CALL OOR_REDUCE(STRESSSEQFIL,LENSTRESSSEQFIL,
     1            NSTARTSCNDHALF,NSTOPSCNDHALF,NUMCYC,
     2            OUTPUTARRAY,DMINSCNDHALF,MAXDELTAS)
C              **REPEATS LAST (SMAX) ENTRY FOR DEBOND STEP
               OUTPUTARRAY(NUMCYC*2+1)=OUTPUTARRAY(NUMCYC*2)
               J=(NUMOORCYC*2+1)*CRACKGROWINC+(FLOOR(NUMOORCYC/2.0)*2)
               DO I=1,(NUMCYC*2+1)
C                 **ENSURE THAT ZEROS IN OUTPUTARRAY ARE NOT 
C                   EXPLICITLY SIMULATED.
                  IF (OUTPUTARRAY(I).EQ.(0.0)) THEN
                     MTSTEPLOADING(I+J)=MTSTEPLOADING(I+J-1)
                  ELSE
                     MTSTEPLOADING(I+J)=OUTPUTARRAY(I)
                  END IF
               END DO
            END IF
C
C           **IDENTIFIES THE FIRST HALF (PREDICTOR) PORTION OF
C             THE NEXT INCREMENT.
            IF (NUMINTFLAG.EQ.1) THEN
               NUMCYC=FLOOR(NUMOORCYC/2.0)
               CALL OOR_REDUCE(STRESSSEQFIL,LENSTRESSSEQFIL,
     1            NSTARTFRSTHALF,NSTOPFRSTHALF,NUMCYC,
     2            OUTPUTARRAY,DMINFRSTHALF,MAXDELTAS)
               J=(NUMOORCYC*2+1)*(CRACKGROWINC+1)
               DO I=1,(NUMCYC*2)
C                 **ENSURE THAT ZEROS IN OUTPUTARRAY ARE NOT 
C                   EXPLICITLY SIMULATED.
                  IF (OUTPUTARRAY(I).EQ.(0.0)) THEN
                     MTSTEPLOADING(I+J)=MTSTEPLOADING(I+J-1)
                  ELSE
                     MTSTEPLOADING(I+J)=OUTPUTARRAY(I)
                  END IF
               END DO
C          
C              DETERMINE CALCKOPSTEP
C              **FORCES USE OF PREVIOUS INCREMENT KOP IF NO CYCLES ARE 
C                EXPLICITLY SIMULATED.
               IF (MAXDELTAS.EQ.(0.0)) THEN
                  CALCKOPSTEP(CRACKGROWINC+1)=1
C              **COULD POTENTIALLY ADD A CRITERIA TO FORGO CALCULATION IF
C                PREDICTOR STEP DA IS LESS THAN 0.5*TRIANGLEA.
C
C              **IDENTIFIES THE LARGEST RANGE WHEN NUMCYC IS LARGER THAN 
C                THE ASSOCIATED DELTA N FOR THE INCREMENT.
C              **ADDITIONALLY, ENSURE THE IDENTIFIED CYCLE INCLUDES A
C                ZERO-CROSSING.  THIS IS THE MOST GENERAL MEANS OF IDENTIFYING 
C                CYCLES WHICH ARE LIKELY EITHER ENTIRELY OPEN OR CLOSED AND 
C                INAPPROPRIATE FOR USE IN EVALUATING KOP.
               ELSEIF (DMINFRSTHALF.EQ.(0.0)) THEN
                  CALCKOPSTEP(CRACKGROWINC+1)=2
                  SMIN=OUTPUTARRAY(1)
                  SMAX=OUTPUTARRAY(2)
                  MAXDELTAS=OUTPUTARRAY(2)-OUTPUTARRAY(1)
                  DO I=2,NUMCYC
                     DELTAS=OUTPUTARRAY(2*I)-OUTPUTARRAY(2*I-1)
                     IF (DELTAS.GT.MAXDELTAS) THEN
                        CALCKOPSTEP(CRACKGROWINC+1)=2*I
                        SMIN=OUTPUTARRAY(2*I-1)
                        SMAX=OUTPUTARRAY(2*I)
                        MAXDELTAS=DELTAS
                     END IF
                  END DO
                  IF ((SMIN.GE.MEANS).OR.(SMAX.LE.MEANS)) THEN
                     CALCKOPSTEP(CRACKGROWINC+1)=1
                  END IF
C              **IDENTIFIES THE FIRST "GOOD" CYCLE TO EVALUATE KOP WHEN
C                THE ASSOCIATED DELTA N IS LARGER THAN NUMCYC FOR THE 
C                INCREMENT.
C              **OOR_REDUCE WILL RETURN AN ARRAY IN THE FORM SMIN,SMAX,...
C                SUCH THAT THE FIRST AND LAST EXTREMA MAY NOT BE SIGNIFICANT
C                REVERSALS AS IDENTIFIED BY THE RACETRACK COUNTING METHOD.
C              **ADDITIONALLY, ENSURE THE IDENTIFIED CYCLE INCLUDES A
C                ZERO-CROSSING.  THIS IS THE MOST GENERAL MEANS OF IDENTIFYING 
C                CYCLES WHICH ARE LIKELY EITHER ENTIRELY OPEN OR CLOSED AND 
C                INAPPROPRIATE FOR USE IN EVALUATING KOP.
               ELSE
C                 **FORCES USE OF PREVIOUS INCREMENT KOP IFF OUTPUTARRAY
C                   IS NOT OF THE FORM SMIN,SMAX,... (VERY RARE) 
                  CALCKOPSTEP(CRACKGROWINC+1)=1			   
                  DO I=1,NUMCYC
                     DELTAS=OUTPUTARRAY(2*I)-OUTPUTARRAY(2*I-1)
                     IF (((DELTAS/MAXDELTAS).GE.DMINFRSTHALF).AND.
     1                   (OUTPUTARRAY(2*I-1).LT.MEANS).AND.
     2                   (OUTPUTARRAY(2*I).GT.MEANS)) THEN
                        CALCKOPSTEP(CRACKGROWINC+1)=2*I
                        GO TO 300
                     END IF
                  END DO
 300              CONTINUE
               END IF
C
            END IF
C
C           RE-WRITE MTSTEPLOADING TO FILE BASED ON IDENTIFIED
C           SIGNIFICANT REVERSALS.
            IF (NUMINTFLAG.EQ.1) THEN
               OPEN(UNIT=101,FILE=LOADFIL(1:LENLOADFIL),
     1              STATUS='REPLACE')
               WRITE(UNIT=101,FMT='(I4)')NUMOORCYC
               DO I=1,99999
                  WRITE(UNIT=101,FMT='(ES17.10)')MTSTEPLOADING(I)
               END DO
               CLOSE(101)	                 
            END IF
C
C           WRITE OUTPUT DATA TO FILE
            OPEN(UNIT=101,FILE=OUTDATAFIL(1:LENOUTDATAFIL),
     1           STATUS='OLD',POSITION='APPEND')	       
            WRITE(UNIT=101,FMT='(I4,5ES17.10,7I9)')CRACKGROWINC,
     1            CRACKLENNOM(CRACKGROWINC),
     2            CRACKLENACT(CRACKGROWINC),
     3            KOP(CRACKGROWINC),
     4            DMINSCNDHALF,DMINFRSTHALF,
     5            CYCNUM(CRACKGROWINC),
     6            CYCNUM(CRACKGROWINC+1),
     7            NSTARTSCNDHALF,NSTOPSCNDHALF,
     8            NSTARTFRSTHALF,NSTOPFRSTHALF,
     9            CALCKOPSTEP(CRACKGROWINC+1)
            CLOSE(101)
C
C           DETERMINE IF CYCNUM(CRACKGROWINC) CORRESPONDS TO EOF CONDITION.
C           EOFFLAG IS PASSED TO USER SUBROUTINE UAMP THROUGH A COMMON BLOCK.
            IF (CYCNUM(CRACKGROWINC).GT.1) THEN
               OPEN(UNIT=101,FILE=STRESSSEQFIL(1:LENSTRESSSEQFIL),
     1              STATUS='OLD',IOSTAT=IOSTATUS)
               DO I=1,CYCNUM(CRACKGROWINC)
                  READ(UNIT=101,FMT=*,IOSTAT=IOSTATUS)
                  IF (IS_IOSTAT_END(IOSTATUS)) THEN
                     EOFFLAG=1
                     GO TO 400
                  END IF
               END DO
 400           CONTINUE
               CLOSE(101)
            END IF            
C
         END IF		 
      END IF
C
      RETURN
      END SUBROUTINE