本程序为计算平面问题各种外力的等效结点载荷、且组装到总载荷向量的函数

1.	function ZQ= Plane_Tri_Load_Vector 
2.	%计算平面问题各种外力的等效结点载荷，且组装到总载荷向量；
3.	%外力的形式包括：竖向重力、不等的体力、结点集中力、线性分布的法向、切向、斜向面力等
4.	%返回量：总载荷向量ZQ
5.	  global  t0  lou  nd  ne  nj   nt  XY  EL  TL QJ  
6.	 %全局变量： t0,lou --厚度、密度； nd ne ng nj nt--结点数,单元数,约束总数,集中力个数,体力类型数
7.	  %  XY、EL、TL、QJ--数组： 节点坐标、单元信息、各类体力数值、集中力信息
8.	global  mx md QMD QMX 
9.	 %   三类面力的：有面力线段数、有结点面力个数、各点面力值、各段的两端结点及面力类型
10.	   ZQ = zeros(2*nd,1 ) ;      % 结构的总载荷列阵
       
11.	%step1：计算体力的等效结点载荷，并组装到总的载荷向量中 
12.	  if lou~=0  |    nt>0                %密度不为0或存在体力时，计算重力或体力的等效结点载荷       
13.	   for ie=1:1:ne                                 
14.	    i=EL(ie,1);j=EL(ie,2);m=EL(ie,3);              
15.	    xi=XY(i,1);xj=XY(j,1);xm=XY(m,1);
16.	    yi=XY(i,2);yj=XY(j,2);ym= XY(m,2);  
17.	    A = (xi*(yj-ym) + xj*(ym-yi) + xm*(yi-yj))/2;        
18.	     if lou~=0                               %计算重力
19.	         qy = - A*t0*lou/3;                            
20.	     for s=1:1:3
21.	        i0= 2*EL(ie,s);                   
22.	        ZQ(i0,1) = ZQ(i0,1) + qy;               
23.	     end
24.	     end
25.	     if  nt>0                                %存在体力  
26.	        it0=EL(ie,4);                         
27.	        Qx=TL(it0,:)*A*t0/3;              
28.	      for s=1:1:3
29.	        i0= 2*EL(ie,s);                    
30.	        ZQ(i0-1,1) = ZQ(i0-1,1) +  Qx(1);   
31.	        ZQ(i0,1) = ZQ(i0,1) +  Qx(2);        
32.	     end
33.	     end  
34.	   end      
35.	  end  
 
36.	% step2：将结点集中力组装到总的载荷向量中   
37.	    if nj>0                                           
38.	     for s=1:1:nj                                   
39.	       i0=2*QJ(s,1);                                                       
40.	       ZQ(i0-1,1) = ZQ(i0-1,1) + QJ(s,2);           
41.	       ZQ(i0,1) = ZQ(i0,1) + QJ(s,3);
42.	     end
43.	    end  
44.	% step3：计算线性分布压力的等效结点载荷，并组装到总的载荷向量中
45.	if  mx>0 
46.	   mx1=0;mx2=0;mx3=0;
47.	     index = (QMX(:,3) ==1);         %将面力分类，有法向面力作用的边界
48.	 if  ~isnan(index)
49.	   QMX1=QMX(index,:);
50.	  [mx1,m0]=size(QMX1);              %法向面力作用边界的数量
51.	  row_index =( QMD(:,2) ==1);          %法向面力的结点
52.	    if ~isnan(row_index)
53.	     QMD1=QMD(row_index,:); 
54.	     [md1,m0]=size(QMD1);               %有法向面力值的结点数量
55.	    else
56.	         disp('面力数据存在错误，缺少法向面力的结点值')
57.	    end
58.	 end
59.	    index = (QMX(:,3) ==2);              %有切向面力作用的边界
60.	   if  ~isnan(index)
61.	    QMX2=QMX(index,:);
62.	    [mx2,m0]=size(QMX2);               %切向面力作用边界的数量
63.	  row_index =( QMD(:,2) ==2);             %切向面力
64.	   if ~isnan(row_index)
65.	        QMD2=QMD(row_index,:); 
66.	        [md2,m0]=size(QMD2);               %有切向面力值的结点数量
67.	    else
68.	      disp('面力数据存在错误，缺少切向面力的结点值')
69.	    end
70.	 end

71.	   index = (QMX(:,3) ==3);               %存在以坐标分量表示的斜向面力
72.	 if  ~isnan(index)
73.	  QMX3=QMX(index,:);
74.	  [mx3,m0]=size(QMX3);               %存在以坐标分量表示斜向面力的数量
75.	    row_index =( QMD(:,2) ==3);           %以坐标分量表示的斜向面力
76.	  if ~isnan(row_index)
77.	      QMD3=QMD(row_index,:); 
78.	      [md3,m0]=size(QMD3);          %有斜向（体力分量）面力值的结点数量
79.	    else
80.	        disp('面力数据存在错误，缺少以面力分量表示的结点值')
81.	  end
82.	 end
83.	 
84.	if  mx1>0                                    
85.	 for s=1:1:mx1                             
86.	    i1=QMX1(s,1);i2= QMX1(s,2);             
87.	   [Q1,Q2]=Equivalent_Nodal_Force_Surface(i1,i2,md1,QMD1,1);     
88.	    ZQ([2*i1-1,2*i1],1) =  ZQ([2*i1-1,2*i1],1) + Q1;  
89.	    ZQ([2*i2-1,2*i2],1) =  ZQ([2*i2-1,2*i2],1) + Q2;   
90.	  end
91.	end 

92.	if  mx2>0                                  
93.	 for s=1:1:mx2                              
94.	    i1=QMX2(s,1);i2= QMX2(s,2);             
95.	    [Q1,Q2]=Equivalent_Nodal_Force_Surface(i1,i2,md2,QMD2,2);     
96.	    ZQ([2*i1-1,2*i1],1) =  ZQ([2*i1-1,2*i1],1) + Q1;   
97.	    ZQ([2*i2-1,2*i2],1) =  ZQ([2*i2-1,2*i2],1) + Q2;  
98.	 end
99.	end 

100.	if  mx3>0                   % nx3----有斜向线性分布表面力的线段个数   
101.	 for s=1:1:mx3                               
102.	    i1=QMX3(s,1);i2= QMX3(s,2);               
103.	    [Q1,Q2]=Equivalent_Nodal_Force_Surface(i1,i2,md3,QMD3,3);      
104.	    ZQ([2*i1-1,2*i1],1) =  ZQ([2*i1-1,2*i1],1) + Q1;   
105.	    ZQ([2*i2-1,2*i2],1) =  ZQ([2*i2-1,2*i2],1) + Q2;  
106.	 end
107.	end 
108.	end
109.	return


