本程序为计算轴对称问题单元应力分量

1.	function Stress_nd = Axisym_Tri_Strees(file_out,U)
2.	%  求轴对称问题单元应力分量
3.	%  输入参数：U----总的结点位移向量； file_out―字符串，存储计算结果的文件名
4.	global  pm  E nv  nd ne  XY  EL 
5.	%全局变量：结点数、单元数、结点坐标、单元信息 、弹性矩阵    
6.	  fid=fopen(file_out,'wt');                %打开存储计算结果的文件    
7.	  fprintf(fid,'   轴对称问题有限元计算结果 \n')         % 设定输出到文件
8.	  fprintf(fid,'\n   轴对称三角元：  结点总数：%i，   单元总数：%i \n', nd,ne)     
9.	  fprintf(fid,' \n   结点位移计算结果 \n') ;               % 设定输出到文件    
10.	  fprintf(fid,'    Node           Ur            Uz     \n')      
11.	  for j=1:1:nd                          %将结点位移计算结果存储到文件
12.	     j0=2*j;
13.	    fprintf(fid,'%8i%20.6e%20.6e\n',j, U(j0-1,1),U(j0,1)) 
14.	  end
15.	%计算单元应力
16.	   ES=zeros(4,1);       % Es ----- 单元应力分量列阵（4×1）： [sigr, sigthta, sigz,  trz]
17.	   De=zeros(6,1);           %单元结点位移向量
18.	   Stress = zeros(ne,4); Stress_nd = zeros(nd,4); 
19.	 D =Elastic_Matrix (pm, E, nv) 
20.	   fprintf(fid,'\n      轴对称单元应力分量计算结果 \n') ;  
21.	fprintf(fid,'Element     sigr        sigthta       sigz         taurz     \n') ;
22.	 for ie=1:1:ne
23.	   for r=1:1:3                     %从结点向量中提取单元结点位移向量
24.	       i0=2* EL(ie,r);
25.	       De(2*r-1,1)=U(i0-1); 
26.	       De(2*r,1)=U(i0); 
27.	   end
28.	   [B, rc, A] =  Axisym_B3_Matrix( ie)          %调用函数，计算单元ie几何矩阵      
29.	    S = D * B                                     %计算单元ie的应力矩阵
30.	    ES=S*De                                 %计算单元ie的应力分量
31.	  Stress(ie,1:4)=ES(1:4,1);                        
32.	   fprintf(fid,'%5d%13.5f%13.5f%13.5f%13.5f\n',ie, Stress(ie,:));  
33.	 end  
34.	  fprintf(fid,' \n  应力结果统计分析 \n'); 
35.	  s_Max=max(Stress);
36.	  fprintf(fid,[repmat('%s ', 1, 1) repmat('%13.5f ',1,4)],'最大值', s_Max);     %输出应力各个量的最大值
37.	  fprintf(fid,' \n'); 
38.	   s_Min=min(Stress);
39.	  fprintf(fid,[repmat('%s ', 1, 1) repmat('%13.5f ',1,4)],'最小值', s_Min);     %输出应力各个量的最小值
40.	  fprintf(fid,' \n'); 
41.	 fprintf(fid,'\n          绕结点应力计算结果 \n')  ; 
42.	fprintf(fid,'   Node       sigr         sigthta        sigz          taurz   \n'); 
43.	        
44.	   for  i=1:1:nd                                
45.	     Sd = zeros( 1, 4 ) ;  ds=0;                      
46.	    for ie=1:1:ne
47.	     for k=1:1:3
48.	        if EL(ie,k) == i                    
49.	           Sd = Sd + Stress(ie, 1:4 ) ; 
50.	           ds=ds+1;
51.	        end
52.	      end
53.	    end
54.	      Stress_nd(i,1:4) = Sd /ds ;             
55.	      fprintf(fid,[repmat('%5i ', 1, 1) repmat('%13.5f ',1,4)],i,Stress_nd(i,:));
56.	     fprintf(fid,' \n');
57.	   end
58.	      fprintf(fid,' \n  绕点平均应力结果统计分析 \n');
59.	     s_Max=max(Stress_nd);
60.	  fprintf(fid,[repmat('%s ', 1, 1) repmat('%13.5f ',1,4)],'最大值', s_Max);     %结点应力各个量的最大值
61.	  fprintf(fid,' \n'); 
62.	   s_Min=min(Stress_nd);
63.	   fprintf(fid,[repmat('%s ', 1, 1) repmat('%13.5f ',1,4)],'最小值', s_Min);     %结点应力各个量的最小值
64.	  fprintf(fid,' \n');
65.	 
66.	fclose all;
67.	return




