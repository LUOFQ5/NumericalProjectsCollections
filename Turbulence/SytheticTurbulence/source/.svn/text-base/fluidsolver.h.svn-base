/******************************************************************************
 *
 * DDF 
 * Copyright 2007-2009 Nils Thuerey
 *
 * Solver class
 *
 *****************************************************************************/

#ifndef DDF_FLUIDSOLVER_H
#define DDF_FLUIDSOLVER_H

#include "globals.h"
#include "grid.h"
#include "particles.h"
#include "solverparams.h"

// classes and definitions for optional mesh surface compile
//#include "meshsurface.h"
#if DDF_MESHSURFACE==1
class SurfaceMesh;
class MeshAnimationSet;
#else
class SurfaceMesh { };
class MeshAnimationSet { };
#endif

// classes for mesh based surface property handling
class VertexColorData;
class WaveData;
class TexCoordData;
template<class T> class NodeProperty;
template<class T> class TriProperty;



namespace DDF { 
class GeomFile;
class SolverPlugin;
class LevelSet;
class VorticitySystem;

extern FluidSolver* ddfWorldFindSolver(const std::string solverName);

//! patch grid based cg solver
class FluidSolver {
	public:
		// constructor
		FluidSolver(const std::string& name="fluidSolverUnnamed");
		~FluidSolver();

		//! setup plugin stack
		void addPlugins(vector<SolverPlugin*>& plugins);
		//! setup init plugin stack
		void addInitPlugins(vector<SolverPlugin*>& plugins);
		//! setup end plugin stack
		void addEndPlugins(vector<SolverPlugin*>& plugins);

		//! init solver
		bool initFluid();
		//! init level set
		void initLevelSet(int eiksolver);
		//! init n particles randomly
		void initTracerParticles(int n);
		//! init particles in fluid region (with given cell sampling)
		void initFsParticles(int sampling);
		//! init free surface tests
		void initFreeSurfaceTest(int n);
		//! advance by time t
		bool simulateFluid();
		bool advanceParticles(Real t, Grid<Vec3>* vels);
		void reinitFlagsFromLevelset(bool correctLsFromFlags);
		bool initFromGeomFile(GeomFile* gf);
		void initZalesakDisk();
		//! run init plugins
		void runInitPlugins();
		
		//! run final plugins
		void finalize();

		// access functions
		inline Real getDt() const        { return mDt; }
		inline Real getSimTime() const   { return mpParams->getSimTime(); }
		inline nVec3i getDim() const     { return mDim; }
		inline std::vector<Particle> *getParticles() { return &mParticles; }
		inline VorticitySystem* getVorticitySys() { return mpVorticitySys; }
		
		inline Vec3 getGravity() const   { return mGravity; }
		inline void setGravity(Vec3 set) { mGravity=set; }
		inline Real getCellSize() const   { return mCellSize; }

		inline int getStepCounter() const { return mStepCounter; }
		inline FlagGrid*   getGridFlags()      { return getParams()->getGridInt("flags"); }
		inline Grid<Vec3>* getGridCurrVel()    { return getParams()->getGridVec3("vel-curr"); }
		inline Grid<Vec3>* getGridOtherVel()   { return getParams()->getGridVec3("vel-old"); }
		inline Grid<Real>* getGridPressure()   { return getParams()->getGridReal("pressure"); }

		inline int get2dKstart() const        { return mTwodKs; }
		inline int get2dKend()   const        { return mTwodKe; }
		inline LevelSet* getLevelSet()        { return mpLevelSet; }
		
		inline void setName(std::string set) { mName = set; }
		inline std::string getName() { return mName; }

		vector<Real>* getDataVector(const std::string& name);
		void loadDataVector(const std::string& name, const std::string& filename);

		void setParams(SolverParams *params) { mpParams = params; }
		SolverParams* getParams() { return mpParams; }

		bool isSolverInited() { return mSolverInited; }
		void setSolverInited(bool set) { mSolverInited=set; }

		int getNumInitSteps() { return  mInitPlugins.size(); }
		int getNumPluginSteps() { return  mPlugins.size(); }

		// return timing statistics string
		std::string getTimingStats(int sort); 

		// functions for mesh based surface tracking
		SurfaceMesh* getMesh(std::string name);
		SurfaceMesh* getSurfaceMesh(std::string name);
		void 		 addSurfaceMesh(std::string name, SurfaceMesh* set); // create new
		void         setSurfaceMesh(std::string name, SurfaceMesh* set); // replace existing
		bool         haveMesh(std::string name);
		void debug_checkMesh(std::string mname);
		// for iterating over map, dont modify!
		std::map< std::string, SurfaceMesh*>& getMeshMap() { return mMapMeshSurfaces; }

		std::vector<int> meshDebugFlags; // debugging, show mesh info in GUI

		MeshAnimationSet* getMeshAni() { return mpMeshAni; }
		void              setMeshAni(MeshAnimationSet* set) { mpMeshAni = set; }
		void ensureMeshAni();
		bool haveMeshAni();

		void setVertexColorData(NodeProperty<VertexColorData>* set) { mpVertexColorData = set; }
		NodeProperty<VertexColorData>* getVertexColorData() { return mpVertexColorData; }
		void setWaveData(NodeProperty<WaveData>* set) { mpWaveData = set; }
		NodeProperty<WaveData>* getWaveData() { return mpWaveData; }
		void setTexCoordData(TriProperty<TexCoordData>* set) { mpTexCoordData = set; }
		TriProperty<TexCoordData>* getTexCoordData() { return mpTexCoordData; }

		// debug output
		void printAllGrids();

		inline const std::string& getDebugBuffer() { return mDebugBuffer; }
		inline void setDebugBuffer(const std::string& s) { mDebugBuffer=s; }

		// helper info functions
		int getFrameNum() { 
			return (int)(getSimTime() / (getParams()->getDt() * getParams()->getDeltaX())); }
		int getAniFrameNum() { 
			return (int)(getSimTime() / (getParams()->mTimestepAnim ) ); }

	protected:
		typedef struct {
			std::string name;
			vector<Real> data;
		} DataVector;

		// parameter set
		SolverParams* mpParams;

		// time step
		Real mDt;
		// dimensions
		nVec3i mDim;
		// size of a single cell
		Real mCellSize;
		// gravity force
		Vec3 mGravity;
		// use free surface functions?
		bool mHaveLsFreeSurf;

		// flag grid
		FlagGrid*  mpFlags;

		// tracers
		std::vector<Particle> mParticles;
		
		VorticitySystem* mpVorticitySys;
		vector<DataVector> mDataVectors;
		std::string mDebugBuffer;
		
		// some global info vars from init
		// 2d k region start & end
		int mTwodKs, mTwodKe;
		// for debugging steps
		int mStepCounter;
		// for debugging sub steps
		int mSubStepCounter;
		int mSubStepSolver;

		// free surface particle sampling
		int mFsPartSampling;


		// utility functions

		// add fs parts for one cell
		void addFsParticles(int i,int j, int k);

		// test
		LevelSet* mpLevelSet; 

		// actual steps to be performed
		vector<SolverPlugin*> mPlugins;
		// steps for init
		vector<SolverPlugin*> mInitPlugins;
		// final steps
		vector<SolverPlugin*> mEndPlugins;
		// profiling of steps
		vector<double> mPluginTimes;

		// mesh surface object
		std::map< std::string, SurfaceMesh*> mMapMeshSurfaces;
		// mesh surface animation
		MeshAnimationSet* mpMeshAni;

		NodeProperty<VertexColorData> *mpVertexColorData;
		NodeProperty<WaveData> *mpWaveData;
		TriProperty<TexCoordData> *mpTexCoordData;

		// debug, store name from init
		std::string mName;
		bool mSolverInited;

	public:

		// debug / helper functions
		// test for obstacle
		bool testObstacleNbs(nVec3i p);
		// interpolate velocity at a given position (note! velocity is face-centered, 
		// so "normal" grid->getInerpolated(..) isnt correct 
		static Vec3 interpolateVelocity(Vec3 pos, Grid<Vec3>* vels, const Real dx); 
		Vec3 interpolateVpVelocity(Vec3 pos, Grid<Vec3>* vels); 

		// set velocity using global accesses, and
		// respecting obstacle flags (only !fgIsObstacle cells are modified)
		void setGlobVelNoobs(int i,int j, int k, Vec3 &set, Grid<Vec3>* vel);
		
		// get velocity component interpolated at grid center
		inline Vec3 getCenteredVel(Grid<Vec3> *vel, int x, int y, int z) { 
			Vec3 v = vel->getGlobal(x,y,z);
			v[0] +=  vel->getGlobal(x+1,y  ,z  )[0];
			v[1] +=  vel->getGlobal(x  ,y+1,z  )[1];
			v[2] +=  vel->getGlobal(x  ,y  ,z+1)[2];
			v *= 0.5;
			return v;
		};

		// debug / testing data
		void* mpPointSet; // debug

}; // FluidSolver


} // namespace DDF 

#endif // DDF_FLUIDSOLVER_H
