
/*
 * pbrt source code Copyright(c) 1998-2007 Matt Pharr and Greg Humphreys
 *
 * All Rights Reserved.
 * For educational use only; commercial use expressly forbidden.
 * NO WARRANTY, express or implied, for this software.
 * (See file License.txt for complete license)
 */

/* state used for include file stuff  */
%{

#define YY_MAIN 0
#define YY_NEVER_INTERACTIVE 1

// for windows, as flex by default includes unistd.h, which is not readily available
#ifdef WIN32
#	define YY_NO_UNISTD_H
#	define ssize_t int
#	include <io.h>
#	include <sys/types.h>
#endif

#include "globals.h"
#include "parser.h"
struct ParamArray;

#ifdef WIN32
#include "pbrtparse.hpp"
#else
#include "pbrtparse.hpp"
#endif

#ifdef WIN32
#pragma warning ( disable: 4244 )
#endif

struct IncludeInfo {
	string filename;
	YY_BUFFER_STATE bufState;
	int lineNum;
};
vector<IncludeInfo> includeStack;

extern int line_num;
int str_pos;

void add_string_char( char c )
{
	yylval.string[str_pos++] = c;
	yylval.string[str_pos] = '\0';
	//printf("t %s \n", yylval.string); // DEBUG
}

//extern void yyerror( const char *str );
//extern void ParseError( const char *format, ... ) PRINTF_FUNC;

static void include_push(char *filename) {
	if (includeStack.size() > 32)
		errFatal("LEX-FATAL", "Only 32 levels of nested Include allowed in scene files. At line "<<line_num , SIMWORLD_ERRPARSE);
	IncludeInfo ii;
	extern string current_file;
	ii.filename = current_file;
	ii.bufState = YY_CURRENT_BUFFER;
	ii.lineNum = line_num;
	includeStack.push_back(ii);

	current_file = filename;
	line_num = 1;

	yyin = fopen(filename, "r");
	if (!yyin)
		errFatal("LEX-FATAL","Unable to open included scene file \""<<filename<<"\". At line "<<line_num, SIMWORLD_ERRPARSE);
	yy_switch_to_buffer(yy_create_buffer(yyin, YY_BUF_SIZE));
}

static void include_pop(void)
{
	extern int line_num;
	extern string current_file;
	yy_delete_buffer(YY_CURRENT_BUFFER);
	yy_switch_to_buffer(includeStack.back().bufState);
	current_file = includeStack.back().filename;
	line_num = includeStack.back().lineNum;
	includeStack.pop_back();
}

%}
%option nounput
WHITESPACE [ \t\0xa]+
NUMBER [-+]?([0-9]+|(([0-9]+\.[0-9]*)|(\.[0-9]+)))([eE][-+]?[0-9]+)?
IDENT [a-zA-Z_][a-zA-Z_0-9]*
%x STR COMMENT COMMENT2 INCL INCL_FILE
%%

Include { BEGIN(INCL); }
<INCL>{WHITESPACE} ;
<INCL>\" { BEGIN(INCL_FILE); }
<INCL>. { errFatal("LEX-ERROR", "Illegal character following Include directive. At line "<<line_num, SIMWORLD_ERRPARSE ); }
<INCL_FILE>\" { BEGIN INITIAL; }
<INCL_FILE>. { errFatal("LEX-ERROR", "Illegal character in Include file name. At line "<<line_num, SIMWORLD_ERRPARSE ); }
<INCL_FILE>[\-a-zA-Z_\.0-9/ \t]+ {
	BEGIN(INITIAL);
	include_push(yytext);
}

"#" { BEGIN COMMENT; }
"//" { BEGIN COMMENT; }
<COMMENT>. /* eat it up */
<COMMENT>\n { line_num++; BEGIN INITIAL; }

"/*" { BEGIN COMMENT2; }
<COMMENT2>"*/" { BEGIN INITIAL; }
<COMMENT2>. /* eat it up */
<COMMENT2>\n { line_num++; }

WorldBegin 		{ return WORLDBEGIN; 		}
WorldEnd 		{ return WORLDEND;			}
InitBegin 		{ return INIT_BEGIN;       	}
InitEnd 		{ return INIT_END; 			}
SolverBegin 	{ return SOLVERBEGIN;       }
SolverEnd 		{ return SOLVEREND; 		}
SolverParams	{ return SOLVERPARAMS; 		}
GlutGui         { return GLUTGUI_PARAMS; 	}
Grid	 		{ return GRID;	 			}
NewFluidSolver	{ return FLUIDSOLVER; }
FluidSolver		{ return FLUIDSOLVER; }
ReferenceSolver { return REFERENCESOLVER; }
Plugin			{ return SOLVERPLUGIN; }
NoiseField     { return NOISEFIELD; }

{WHITESPACE} /* do nothing */
\n { line_num++; }
{NUMBER} {
  yylval.num = (float) atof(yytext);
  return NUM;
}
{IDENT} {
	strcpy( yylval.string, yytext );
	return ID;
}
"[" { return LBRACK; }
"]" { return RBRACK; }

\" { BEGIN STR; str_pos = 0; yylval.string[str_pos] = '\0'; }
<STR>\\n {add_string_char('\n');}
<STR>\\t {add_string_char('\t');}
<STR>\\r {add_string_char('\r');}
<STR>\\b {add_string_char('\b');}
<STR>\\f {add_string_char('\f');}
<STR>\\\" {add_string_char('\"');}
<STR>\\\\ {add_string_char('\\');}
<STR>\\[0-9]{3} {
  int val = atoi(yytext+1);
  while(val > 256)
    val -= 256;
  add_string_char(val);
}
<STR>\\\n {line_num++;}
<STR>\\. { add_string_char(yytext[1]);}
<STR>\" {BEGIN INITIAL; return STRING;}
<STR>. {add_string_char(yytext[0]);}
<STR>\n { errFatal("LEX-ERROR", "Unterminated string!. At line "<<line_num, SIMWORLD_ERRPARSE);}

. { errFatal("LEX-ERROR", "Illegal character: " << yytext[0]<<". At line "<<line_num, SIMWORLD_ERRPARSE ); }
%%


int yywrap(void)
{
	if (includeStack.size() ==0) return 1;
	include_pop();
	BEGIN(INCL_FILE);
	return 0;
}

