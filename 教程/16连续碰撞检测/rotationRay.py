import numpy as np 

# RotationalCCD

d = np.array([0,0,1])

t1 = np.array([0,0,0])
t2 = np.array([0,1,0])
t3 = np.array([1,0,0])

term0 = d[0] * t1[1] * t2[2] - d[0] * t1[1] * t3[2] - d[0] * t1[2] * t2[1] 
term1 = d[0] * t1[2] * t3[1] + d[0] * t2[1] * t3[2] - d[0] * t2[2] * t3[1] - d[1] * t1[0] * t2[2]
term2 = d[1] * t1[0] * t3[2] + d[1] * t1[2] * t2[0] - d[1] * t1[2] * t3[0] - d[1] * t2[0] * t3[2]
term3 = d[1] * t2[2] * t3[0] + d[2] * t1[0] * t2[1] - d[2] * t1[0] * t3[1] - d[2] * t1[1] * t2[0] 
term4 = d[2] * t1[1] * t3[0] + d[2] * t2[0] * t3[1] - d[2] * t2[1] * t3[0]

denom = term0 + term1 + term2 + term3 + term4
# denom = d dot cross(x3 - x1,x2 - x1)
# 如果 denom = 0,那么就有无数个相交点

u = (-1*d[0] * t1[1] * t3[2] + d[0] * t1[2] * t3[1] + d[1] * t1[0] * t3[2] - d[1] * t1[2] * t3[0] - d[2] * t1[0] * t3[1] + d[2] * t1[1] * t3[0])/denom;
v = (d[0] * t1[1] * t2[2] - d[0] * t1[2] * t2[1] - d[1] * t1[0] * t2[2] + d[1] * t1[2] * t2[0] + d[2] * t1[0] * t2[1] - d[2] * t1[1] * t2[0])/denom;
t = (t1[0] * t2[1] * t3[2] - t1[0] * t2[2] * t3[1] - t1[1] * t2[0] * t3[2] + t1[1] * t2[2] * t3[0] + t1[2] * t2[0] * t3[1] - t1[2] * t2[1] * t3[0])/denom;
